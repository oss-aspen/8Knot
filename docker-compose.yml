services:
  db-init:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    command: ["python3", "./cache_manager/db_init.py"]
    depends_on:
      postgres-cache:
        condition: service_healthy  # to ensure that postgres is indeed initialized before this starts
    env_file:
      - .env
    # sometimes, postgres-cache isn't spun up before this starts.
    # so it'll fail. We want this to restart when it fails, because
    # postgres will be ready eventually. we don't want it to restart
    # after it succeeds. give it 1000 attempts I guess.
    restart: on-failure:1000

  reverse-proxy:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app-server
    ports:
      - "8080:8080"  # bound to host port, exposed app endpoint

  app-server:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    command:
      [
        "gunicorn",
        "--reload", # for Production, disable the "--reload" option.
        "--bind",
        ":8080",
        "app:server",
        "--workers",
        "1",
        "--threads",
        "2",
        "--timeout",
        "300",
        "--keep-alive",
        "5"
      ]
    # ports:
    #   - 8080:8080
    depends_on:
      - worker-callback
      - worker-query
      - redis-cache
      - redis-users
      - postgres-cache
      - db-init
    env_file:
      - .env
    environment:
      - EIGHTKNOT_SEARCHBAR_OPTS_SORT=shortest  # Try different options: shortest, longest, alphabetical
      - EIGHTKNOT_SEARCHBAR_OPTS_MAX_RESULTS=5500  # Maximum number of results to return (org and repo)
      - EIGHTKNOT_SEARCHBAR_OPTS_MAX_REPOS=5000  # Max number of repos
    restart: always

  worker-callback:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    command: ["celery", "-A", "app:celery_app", "worker", "--loglevel=INFO", "--concurrency=1", "--time-limit=300", "--soft-time-limit=240"]
    depends_on:
      - redis-cache
      - redis-users
      - postgres-cache
    env_file:
      - .env
    restart: always

  worker-query:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    command:
      [
        "celery",
        "-A",
        "app:celery_app",
        "worker",
        "--loglevel=INFO",
        "-Q",
        "data",
        "--concurrency=1",
        "--time-limit=600",
        "--soft-time-limit=540"
      ]
    depends_on:
      - redis-cache
      - postgres-cache
    env_file:
      - .env
    restart: always

  # for data blob caching
  redis-cache:
    image: docker.io/library/redis:6
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    env_file:
      - .env
    restart: always

  # for user session storage
  redis-users:
    image: docker.io/library/redis:6
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    env_file:
      - .env
    restart: always

  postgres-cache:
    image: docker.io/library/postgres:16
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    volumes:
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    #   - postgres-cache:/var/lib/postgresql/data
    # environment:
    #   # the password we use shouldn't matter because DB is only reachable via
    #   # internal network.
    #   - POSTGRES_PASSWORD=password123
    env_file:
      - .env
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-cache:

  # flower:
  #   build:
  #     context: .
  #     dockerfile: ./docker/Dockerfile
  #   command:
  #     [ "celery", "-A", "app:celery_app", "flower" ]
  #   depends_on:
  #     - worker-callback
  #     - worker-query
  #     - redis-cache
  #     - app-server
  #   env_file:
  #     - .env
  #   ports:
  #     - 5555:5555
  #   profiles:
  #     - monitoring  # run w/ '--profile monitoring' flag to enable
